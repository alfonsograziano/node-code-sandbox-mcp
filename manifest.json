{
  "dxt_version": "0.1",
  "id": "node-code-sandbox",
  "name": "node-code-sandbox",
  "display_name": "Node.js Code Sandbox",
  "version": "1.2.0",
  "description": "Run arbitrary JavaScript inside disposable Docker containers and install npm dependencies on the fly.",
  "long_description": "Run arbitrary JavaScript inside disposable Docker containers and install npm dependencies on the fly.",
  "author": {
    "name": "Alfonso Graziano",
    "email": "info@alfonsograziano.it",
    "url": "https://alfonsograziano.it"
  },
  "homepage": "https://jsdevai.com/",
  "documentation": "https://jsdevai.com/",
  "support": "https://jsdevai.com/",
  "icon": "assets/images/icon.png",
  "screenshots": ["assets/images/website_homepage.png"],
  "server": {
    "type": "node",
    "entry_point": "dist/server.js",
    "mcp_config": {
      "command": "node",
      "args": ["${__dirname}/dist/server.js"],
      "env": {
        "FILES_DIR": "${user_config.FILES_DIR}"
      }
    }
  },
  "tools": [
    {
      "name": "sandbox_initialize",
      "description": "Start a new isolated Docker container running Node.js. Used to set up a sandbox session for multiple commands and scripts."
    },
    {
      "name": "sandbox_exec",
      "description": "Execute one or more shell commands inside a running sandbox container. Requires a sandbox initialized beforehand."
    },
    {
      "name": "run_js",
      "description": "Install npm dependencies and run JavaScript code inside a running sandbox container. After running, you must manually stop the sandbox to free resources. The code must be valid ESModules (import/export syntax). Best for complex workflows where you want to reuse the environment across multiple executions. When reading and writing from the Node.js processes, you always need to read from and write to the './files' directory to ensure persistence on the mounted volume."
    },
    {
      "name": "sandbox_stop",
      "description": "Terminate and remove a running sandbox container. Should be called after finishing work in a sandbox initialized with sandbox_initialize."
    },
    {
      "name": "run_js_ephemeral",
      "description": "Run a JavaScript snippet in a temporary disposable container with optional npm dependencies, then automatically clean up. The code must be valid ESModules (import/export syntax). Ideal for simple one-shot executions without maintaining a sandbox or managing cleanup manually. When reading and writing from the Node.js processes, you always need to read from and write to the './files' directory to ensure persistence on the mounted volume. This includes images (e.g., PNG, JPEG) and other files (e.g., text, JSON, binaries)."
    },
    {
      "name": "get_dependency_types",
      "description": "Given an array of npm package names (and optional versions), fetch whether each package ships its own TypeScript definitions or has a corresponding @types/â€¦ package, and return the raw .d.ts text. Useful when you're about to run a Node.js script against an unfamiliar dependency and want to inspect what APIs and types it exposes."
    },
    {
      "name": "search_npm_packages",
      "description": "Search for npm packages by a search term and get their name, description, and a README snippet."
    }
  ],
  "compatibility": {
    "platforms": ["darwin", "win32", "linux"],
    "runtimes": {
      "node": ">=22.0.0"
    }
  },
  "user_config": {
    "FILES_DIR": {
      "type": "string",
      "title": "Files directory",
      "description": "A directory to mount in the Docker sandbox to read and write files",
      "required": false,
      "sensitive": false
    }
  },
  "keywords": ["node.js", "javascript", "docker", "code_execution", "sandbox"],
  "license": "MIT"
}
